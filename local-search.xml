<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Algorithm</title>
    <link href="/2021/12/09/%E7%AE%97%E6%B3%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <url>/2021/12/09/%E7%AE%97%E6%B3%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>算法竞赛经验分享会做的思维导图</p><span id="more"></span><h2 id="算法竞赛经验分享"><a href="#算法竞赛经验分享" class="headerlink" title="算法竞赛经验分享"></a>算法竞赛经验分享</h2><p><img src="/img/Algorithm/1.png"></p><h2 id="基本算法图谱"><a href="#基本算法图谱" class="headerlink" title="基本算法图谱"></a>基本算法图谱</h2><p><img src="/img/Algorithm/2.png"></p><p>道虽远，行则将至</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL练习题</title>
    <link href="/2021/12/09/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2021/12/09/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>34道MySQL高频练习题</p><span id="more"></span><p><strong>基础表格为Oracle自带表：emp、dept、salgrade</strong></p><h2 id="1、取得每个部门最高薪水的人员名称"><a href="#1、取得每个部门最高薪水的人员名称" class="headerlink" title="1、取得每个部门最高薪水的人员名称"></a>1、取得每个部门最高薪水的人员名称</h2><ul><li>首先获取每个部门的最高薪水、部门号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, max(sal) maxsal from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次取上一步结果与emp表进行内连接进行查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select t.deptno, e.ename, t.maxsal <br>from emp e<br>join (select deptno, max(sal) maxsal from emp group by deptno) t<br>on e.deptno &#x3D; t.deptno and e.sal &#x3D; t.maxsal;<br></code></pre></td></tr></table></figure><h2 id="2、哪些人的薪水在部门的平均薪水之上"><a href="#2、哪些人的薪水在部门的平均薪水之上" class="headerlink" title="2、哪些人的薪水在部门的平均薪水之上"></a>2、哪些人的薪水在部门的平均薪水之上</h2><ul><li>首先找到各部门的平均薪水</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, avg(sal) from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次找到员工号，员工姓名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.empno, e.ename, e.sal, t.*<br>from emp e<br>join (select deptno, avg(sal) avgsal from emp group by deptno) t<br>on e.deptno &#x3D; t.deptno<br>where e.sal &gt; t.avgsal;<br></code></pre></td></tr></table></figure><h2 id="3、取得部门中（所有人的）平均的薪水等级"><a href="#3、取得部门中（所有人的）平均的薪水等级" class="headerlink" title="3、取得部门中（所有人的）平均的薪水等级"></a>3、取得部门中（所有人的）平均的薪水等级</h2><ul><li>首先连接e表和s表，再按照deptno分组聚合sal求平均值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.deptno, avg(s.grade) avggrade<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal<br>group by deptno;<br></code></pre></td></tr></table></figure><h2 id="4、不准用组函数（Max-），取得最高薪水"><a href="#4、不准用组函数（Max-），取得最高薪水" class="headerlink" title="4、不准用组函数（Max ），取得最高薪水"></a>4、不准用组函数（Max ），取得最高薪水</h2><ul><li>降序排序后输出第一行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select empno, sal<br>from emp<br>order by sal desc<br>limit 1;<br></code></pre></td></tr></table></figure><h2 id="5、取得平均薪水最高的部门的部门编号"><a href="#5、取得平均薪水最高的部门的部门编号" class="headerlink" title="5、取得平均薪水最高的部门的部门编号"></a>5、取得平均薪水最高的部门的部门编号</h2><ul><li>首先获得每个部门的平均薪水</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, avg(sal) avgsal from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次获得平均薪水最高的部门编号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno<br>from emp<br>group by deptno<br>order by avg(sal) desc<br>limit 1;<br></code></pre></td></tr></table></figure><h2 id="6、取得平均薪水最高的部门的部门名称"><a href="#6、取得平均薪水最高的部门的部门名称" class="headerlink" title="6、取得平均薪水最高的部门的部门名称"></a>6、取得平均薪水最高的部门的部门名称</h2><ul><li>首先获得每个部门的平均薪水</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, avg(sal) avgsal from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次获得部门名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.dname, t.avgsal<br>from (select deptno, avg(sal) avgsal from emp group by deptno) t<br>join dept d<br>on t.deptno &#x3D; d.deptno<br>order by t.avgsal desc<br>limit 1;<br></code></pre></td></tr></table></figure><h2 id="7、求平均薪水的等级最低的部门的部门名称"><a href="#7、求平均薪水的等级最低的部门的部门名称" class="headerlink" title="7、求平均薪水的等级最低的部门的部门名称"></a>7、求平均薪水的等级最低的部门的部门名称</h2><ul><li>首先求出每个部门平均薪水</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, avg(sal) avgsal from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次求出每个部门平均薪水的等级</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select t.deptno, t.avgsal, s.grade <br>from (select deptno, avg(sal) avgsal from emp group by deptno) t<br>join salgrade s<br>on t.avgsal between s.losal and s.hisal<br>order by t.avgsal;<br></code></pre></td></tr></table></figure><ul><li>最后求出等级最低的部门的名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select t.deptno, d.dname, s.grade<br>from (select deptno, avg(sal) avgsal from emp group by deptno) t<br>join salgrade s<br>on t.avgsal between s.losal and s.hisal<br>join dept d<br>on t.deptno &#x3D; d.deptno<br>order by t.avgsal<br>limit 1;<br></code></pre></td></tr></table></figure><h2 id="8、取得比普通员工-员工代码没有在-mgr-字段上出现的-的最高薪水还要高的领导人姓名"><a href="#8、取得比普通员工-员工代码没有在-mgr-字段上出现的-的最高薪水还要高的领导人姓名" class="headerlink" title="8、取得比普通员工(员工代码没有在 mgr 字段上出现的) 的最高薪水还要高的领导人姓名"></a>8、取得比普通员工(员工代码没有在 mgr 字段上出现的) 的最高薪水还要高的领导人姓名</h2><p><strong>前提：比普通员工最高薪水还要高的未必是领导</strong></p><ul><li>首先获得领导人的编号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select mgr from emp where mgr is not null;<br></code></pre></td></tr></table></figure><ul><li>其次获得普通员工的最高工资</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(sal) maxsal<br>from emp<br>where empno not in (select mgr from emp where mgr is not null);<br></code></pre></td></tr></table></figure><ul><li>最后找出工资比<strong>maxsal</strong>高的领导姓名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select t.ename, t.sal<br>from ((select ename, sal from emp where mgr is not null) union (select ename, sal from emp where mgr is null)) t<br>where t.sal &gt; (select max(sal) maxsal<br>from emp<br>where empno not in (select mgr from emp where mgr is not null));<br></code></pre></td></tr></table></figure><h2 id="9、取得薪水最高的前五名员工"><a href="#9、取得薪水最高的前五名员工" class="headerlink" title="9、取得薪水最高的前五名员工"></a>9、取得薪水最高的前五名员工</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, sal from emp order by sal desc limit 5;<br></code></pre></td></tr></table></figure><h2 id="10、取得薪水最高的第六到第十名员工"><a href="#10、取得薪水最高的第六到第十名员工" class="headerlink" title="10、取得薪水最高的第六到第十名员工"></a>10、取得薪水最高的第六到第十名员工</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, sal from emp order by sal desc limit 5, 5;<br></code></pre></td></tr></table></figure><h2 id="11、取得最后入职的-5-名员工"><a href="#11、取得最后入职的-5-名员工" class="headerlink" title="11、取得最后入职的 5 名员工"></a>11、取得最后入职的 5 名员工</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp order by hiredate desc limit 5;<br></code></pre></td></tr></table></figure><h2 id="12、取得每个薪水等级有多少员工"><a href="#12、取得每个薪水等级有多少员工" class="headerlink" title="12、取得每个薪水等级有多少员工"></a>12、取得每个薪水等级有多少员工</h2><ul><li>首先获得每个员工的薪水等级</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.deptno, s.grade<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal;<br></code></pre></td></tr></table></figure><ul><li>其次对每个薪水等级的员工进行计数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.grade, count(e.deptno) cntno<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal<br>group by s.grade;<br></code></pre></td></tr></table></figure><h2 id="13、面试题"><a href="#13、面试题" class="headerlink" title="13、面试题"></a>13、面试题</h2><p>有 3 个表 S(学生表)，C（课程表），SC（学生选课表）<br>S（SNO，SNAME）代表（学号，姓名）<br>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）<br>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）<br>问题：</p><ol><li>找出没选过“黎明”老师的所有学生姓名。</li></ol><ul><li>进行多表连接where筛选</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select S.sname<br>from SC<br>join S<br>on SC.sno &#x3D; S.sno<br>join C<br>on SC.cno &#x3D; C.cno<br>where C.cteacher !&#x3D; &#39;黎明&#39;;<br></code></pre></td></tr></table></figure><ol start="2"><li>列出 2 门以上（含2 门）不及格学生姓名及平均成绩。</li></ol><ul><li>多表连接后进行分组聚合筛选</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select SC.sno, avg(scgrade)<br>from SC<br>join S<br>on SC.sno &#x3D; S.sno<br>group by SC.sno;<br>having count(SC.scgrade &lt; 60) &gt;&#x3D; 2;<br></code></pre></td></tr></table></figure><ol start="3"><li>既学过 1 号课程又学过 2 号课所有学生的姓名。</li></ol><ul><li>首先找到学过 1 号课程的所有学生的学号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct sno from SC where cno &#x3D; 1;<br></code></pre></td></tr></table></figure><ul><li>其次找到既学过 1 号课程又学过 2 号课所有学生的姓名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select SC.sno<br>from SC<br>join S<br>on SC.sno &#x3D; S.sno<br>where SC.cno &#x3D; 2 and SC.cno in (select sno from SC where cno &#x3D; 1);<br></code></pre></td></tr></table></figure><h2 id="14、列出所有员工及领导的姓名"><a href="#14、列出所有员工及领导的姓名" class="headerlink" title="14、列出所有员工及领导的姓名"></a>14、列出所有员工及领导的姓名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.ename, e2.ename<br>from emp e1<br>left join emp e2<br>on e1.mgr &#x3D; e2.empno;<br></code></pre></td></tr></table></figure><h2 id="15、列出受雇日期早于其直接上级的所有员工的编号-姓名-部门名称"><a href="#15、列出受雇日期早于其直接上级的所有员工的编号-姓名-部门名称" class="headerlink" title="15、列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称"></a>15、列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.empno, e1.ename, d.dname<br>from emp e1<br>join emp e2<br>on e1.mgr &#x3D; e2.empno<br>left join dept d<br>on e1.deptno &#x3D; d.deptno<br>where e1.hiredate &lt; e2.hiredate;<br></code></pre></td></tr></table></figure><h2 id="16、列出部门名称和这些部门的员工信息-同时列出那些没有员工的部门"><a href="#16、列出部门名称和这些部门的员工信息-同时列出那些没有员工的部门" class="headerlink" title="16、列出部门名称和这些部门的员工信息, 同时列出那些没有员工的部门"></a>16、列出部门名称和这些部门的员工信息, 同时列出那些没有员工的部门</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.*, d.dname<br>from emp e<br>right join dept d<br>on e.deptno &#x3D; d.deptno;<br></code></pre></td></tr></table></figure><h2 id="17、列出至少有-5-个员工的所有部门"><a href="#17、列出至少有-5-个员工的所有部门" class="headerlink" title="17、列出至少有 5 个员工的所有部门"></a>17、列出至少有 5 个员工的所有部门</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.dname, count(e.empno) cntno<br>from emp e<br>left join dept d<br>on e.deptno &#x3D; d.deptno<br>group by e.deptno<br>having count(e.empno) &gt;&#x3D; 5;<br></code></pre></td></tr></table></figure><h2 id="18、列出薪金比”SMITH”-多的所有员工信息"><a href="#18、列出薪金比”SMITH”-多的所有员工信息" class="headerlink" title="18、列出薪金比”SMITH” 多的所有员工信息"></a>18、列出薪金比”SMITH” 多的所有员工信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp where sal &gt; (select sal from emp where ename &#x3D; &#39;smith&#39;);<br></code></pre></td></tr></table></figure><h2 id="19、列出所有”CLERK”-办事员-的姓名及其部门名称-部门的人数"><a href="#19、列出所有”CLERK”-办事员-的姓名及其部门名称-部门的人数" class="headerlink" title="19、列出所有”CLERK”( 办事员) 的姓名及其部门名称, 部门的人数"></a>19、列出所有”CLERK”( 办事员) 的姓名及其部门名称, 部门的人数</h2><ul><li>首先列出办事员的姓名及其部门名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, d.dname<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>where e.job &#x3D; &#39;clerk&#39;;<br></code></pre></td></tr></table></figure><ul><li>其次求出各部门的人数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, count(empno) from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>最后进行连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, d.dname, t.cnteno<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>left join (select deptno, count(empno) cnteno from emp group by deptno) t<br>on e.deptno &#x3D; t.deptno<br>where e.job &#x3D; &#39;clerk&#39;;<br></code></pre></td></tr></table></figure><h2 id="20、列出最低薪金大于-1500-的各种工作及从事此工作的全部雇员人数"><a href="#20、列出最低薪金大于-1500-的各种工作及从事此工作的全部雇员人数" class="headerlink" title="20、列出最低薪金大于 1500 的各种工作及从事此工作的全部雇员人数"></a>20、列出最低薪金大于 1500 的各种工作及从事此工作的全部雇员人数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job, count(empno) cnteno<br>from emp<br>group by job<br>having min(sal) &gt; 1500;<br></code></pre></td></tr></table></figure><h2 id="21、列出在部门”SALES”-lt-销售部-gt-工作的员工的姓名-假定不知道销售部的部门编号"><a href="#21、列出在部门”SALES”-lt-销售部-gt-工作的员工的姓名-假定不知道销售部的部门编号" class="headerlink" title="21、列出在部门”SALES”&lt; 销售部&gt; 工作的员工的姓名, 假定不知道销售部的部门编号"></a>21、列出在部门”SALES”&lt; 销售部&gt; 工作的员工的姓名, 假定不知道销售部的部门编号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>where d.dname &#x3D; &#39;sales&#39;;<br></code></pre></td></tr></table></figure><h2 id="22、列出薪金高于公司平均薪金的所有员工-所在部门-上级领导-雇员的工资等级"><a href="#22、列出薪金高于公司平均薪金的所有员工-所在部门-上级领导-雇员的工资等级" class="headerlink" title="22、列出薪金高于公司平均薪金的所有员工, 所在部门, 上级领导, 雇员的工资等级"></a>22、列出薪金高于公司平均薪金的所有员工, 所在部门, 上级领导, 雇员的工资等级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.ename, e1.deptno, e2.ename, s.grade<br>from emp e1<br>join salgrade s<br>on e1.sal between s.losal and s.hisal<br>left join emp e2<br>on e1.mgr &#x3D; e2.empno<br>where e1.sal &gt; (select avg(sal) from emp);<br></code></pre></td></tr></table></figure><h2 id="23、列出与”SCOTT”从事相同工作的所有员工及部门名称"><a href="#23、列出与”SCOTT”从事相同工作的所有员工及部门名称" class="headerlink" title="23、列出与”SCOTT”从事相同工作的所有员工及部门名称"></a>23、列出与”SCOTT”从事相同工作的所有员工及部门名称</h2><ul><li>首先列出从事相同工作的员工及部门号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, deptno<br>from emp<br>where job &#x3D; (select job from emp where ename &#x3D; &#39;scott&#39;) and ename !&#x3D; &#39;scott&#39;;<br></code></pre></td></tr></table></figure><ul><li>其次多表连接列出部门名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, e.deptno, d.dname<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>where e.job &#x3D; (select job from emp where ename &#x3D; &#39;scott&#39;) and e.ename !&#x3D; &#39;scott&#39;;<br></code></pre></td></tr></table></figure><h2 id="24、列出薪金等于部门-30-中员工的薪金的其他员工的姓名和薪金"><a href="#24、列出薪金等于部门-30-中员工的薪金的其他员工的姓名和薪金" class="headerlink" title="24、列出薪金等于部门 30 中员工的薪金的其他员工的姓名和薪金"></a>24、列出薪金等于部门 30 中员工的薪金的其他员工的姓名和薪金</h2><ul><li>首先求出部门30的员工的薪金</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sal from emp where deptno &#x3D; 30;<br></code></pre></td></tr></table></figure><ul><li>其次求出部门不是30但薪金等于30部门员工的员工的姓名和薪金</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, sal<br>from emp<br>where deptno !&#x3D; 30 and (sal in (select sal from emp where deptno &#x3D; 30));<br></code></pre></td></tr></table></figure><h2 id="25、列出薪金高于在部门-30-工作的所有员工的薪金的员工姓名和薪金及部门名称"><a href="#25、列出薪金高于在部门-30-工作的所有员工的薪金的员工姓名和薪金及部门名称" class="headerlink" title="25、列出薪金高于在部门 30 工作的所有员工的薪金的员工姓名和薪金及部门名称"></a>25、列出薪金高于在部门 30 工作的所有员工的薪金的员工姓名和薪金及部门名称</h2><ul><li>首先求出部门30的最高薪资</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select max(sal) maxsal from emp where deptno &#x3D; 30;<br></code></pre></td></tr></table></figure><ul><li>其次找出所有薪资大于<strong>maxsal</strong>的员工姓名、薪金、部门名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, e.sal, d.dname<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>where e.sal &gt; (select max(sal) maxsal from emp where deptno &#x3D; 30);<br></code></pre></td></tr></table></figure><h2 id="26、列出在每个部门工作的员工数量-平均工资和平均服务期限"><a href="#26、列出在每个部门工作的员工数量-平均工资和平均服务期限" class="headerlink" title="26、列出在每个部门工作的员工数量, 平均工资和平均服务期限"></a>26、列出在每个部门工作的员工数量, 平均工资和平均服务期限</h2><ul><li>首先求出每个部门的员工数量、平均薪资</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, count(empno) cntno, avg(sal) avgsal from emp group by deptno;<br></code></pre></td></tr></table></figure><ul><li>其次求出每个部门的平均服务期限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.deptno, count(e.empno) cntno,ifnull(avg(e.sal),0) avgsal, ifnull(avg(timestampdiff(YEAR, hiredate, now())), 0) avgservicetime<br>from emp e<br>right join dept d<br>on e.deptno &#x3D; d.deptno<br>group by d.deptno;<br></code></pre></td></tr></table></figure><h2 id="27、列出所有员工的姓名、部门名称和工资"><a href="#27、列出所有员工的姓名、部门名称和工资" class="headerlink" title="27、列出所有员工的姓名、部门名称和工资"></a>27、列出所有员工的姓名、部门名称和工资</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, d.dname, e.sal<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno;<br></code></pre></td></tr></table></figure><h2 id="28、列出所有部门的详细信息和人数"><a href="#28、列出所有部门的详细信息和人数" class="headerlink" title="28、列出所有部门的详细信息和人数"></a>28、列出所有部门的详细信息和人数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.*, count(e.empno) cntno<br>from emp e<br>join dept d<br>on e.deptno &#x3D; d.deptno<br>group by e.deptno;<br></code></pre></td></tr></table></figure><h2 id="29、列出各种工作的最低工资及从事此工作的雇员姓名"><a href="#29、列出各种工作的最低工资及从事此工作的雇员姓名" class="headerlink" title="29、列出各种工作的最低工资及从事此工作的雇员姓名"></a>29、列出各种工作的最低工资及从事此工作的雇员姓名</h2><ul><li>先找出各种工作的最低工资</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job, min(sal) minsal from emp group by job;<br></code></pre></td></tr></table></figure><ul><li>再进行多表连接查询雇员姓名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, e.job, t.minsal<br>from emp e<br>join (select job, min(sal) minsal from emp group by job) t<br>on e.job &#x3D; t.job and e.sal &#x3D; t.minsal;<br></code></pre></td></tr></table></figure><h2 id="30、列出各个部门的MANAGER-领导-的最低薪金"><a href="#30、列出各个部门的MANAGER-领导-的最低薪金" class="headerlink" title="30、列出各个部门的MANAGER(领导)的最低薪金"></a>30、列出各个部门的MANAGER(领导)的最低薪金</h2><ul><li>首先找出所有领导的员工号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct ifnull(mgr, empno) empno from emp;<br></code></pre></td></tr></table></figure><ul><li>其次找出每个部门领导的最低薪资</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, min(sal) minsal<br>from emp<br>where empno in (select distinct ifnull(mgr, empno) from emp)<br>group by deptno;<br></code></pre></td></tr></table></figure><h2 id="31、列出所有员工的年工资-按年薪从低到高排序"><a href="#31、列出所有员工的年工资-按年薪从低到高排序" class="headerlink" title="31、列出所有员工的年工资, 按年薪从低到高排序"></a>31、列出所有员工的年工资, 按年薪从低到高排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *, (sal + ifnull(comm, 0)) * 12 sall<br>from emp <br>order by (sal + ifnull(comm, 0)) * 12 asc;<br></code></pre></td></tr></table></figure><h2 id="32、求出员工领导的薪水超过3000的员工名称与领导"><a href="#32、求出员工领导的薪水超过3000的员工名称与领导" class="headerlink" title="32、求出员工领导的薪水超过3000的员工名称与领导"></a>32、求出员工领导的薪水超过3000的员工名称与领导</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.ename, e2.ename, e2.sal<br>from emp e1<br>join emp e2<br>on e1.mgr &#x3D; e2.empno<br>where e2.sal &gt; 3000;<br></code></pre></td></tr></table></figure><h2 id="33、求出部门名称中-带’S’字符的部门员工的工资合计、部门人数"><a href="#33、求出部门名称中-带’S’字符的部门员工的工资合计、部门人数" class="headerlink" title="33、求出部门名称中, 带’S’字符的部门员工的工资合计、部门人数"></a>33、求出部门名称中, 带’S’字符的部门员工的工资合计、部门人数</h2><ul><li>首先求出部门名称带’S’字符的部门</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno from dept where dname like &#39;%S%&#39;;<br></code></pre></td></tr></table></figure><ul><li>其次求出目标部门的工资合计、部门人数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select t.deptno, ifnull(sum(e.sal), 0) sumsal, count(e.empno) cntempno<br>from emp e<br>right join (select deptno from dept where dname like &#39;%S%&#39;) t<br>on e.deptno &#x3D; t.deptno<br>group by e.deptno;<br></code></pre></td></tr></table></figure><h2 id="34、给任职日期超过30-年的员工加薪-10"><a href="#34、给任职日期超过30-年的员工加薪-10" class="headerlink" title="34、给任职日期超过30 年的员工加薪 10%"></a>34、给任职日期超过30 年的员工加薪 10%</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update emp<br>set sal &#x3D; sal * 1.1<br>where timestampdiff(YEAR, hiredate, now()) &gt; 30;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五一数学建模总结</title>
    <link href="/2021/05/04/%E4%BA%94%E4%B8%80%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/04/%E4%BA%94%E4%B8%80%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>首战数学建模，三天三夜也没有那么难</p><span id="more"></span><h2 id="背景回顾"><a href="#背景回顾" class="headerlink" title="背景回顾"></a>背景回顾</h2><p>数学建模比赛多种多样，五一数学建模虽说不是含金量最高的比赛，但总的来说它还是有一定知名度和影响力的，而且它的题目难度没有高教社杯那么难，尤其对于我们这种入门不久的选手来说（学了5周算是入门了吧），五一数学建模刚好可以作为我们的磨刀石，而且学院选拔种子队的首要依据就是拿到五一数学建模的成功参赛证，综合这些因素，五一数学建模肯定是我们的必选项了。</p><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><h3 id="跃跃欲试的开始"><a href="#跃跃欲试的开始" class="headerlink" title="跃跃欲试的开始"></a>跃跃欲试的开始</h3><p>5月1号早上九点开题，头一天晚上我就开始紧张起来了，和潘总商量着明天早上几点起床、吃完饭几点能到教室、哪个教室环境好、哪个位置空间大还不热、要不要买一些吃的食物面包什么的，乱七八糟的想了一大堆，其实大部分考虑都没什么用，第二天早上我六点二十就醒了，怎么也睡不着了，🍞什么的也没有买，想着正餐还是必须要吃，零食面包什么的还是等等再买吧，吃完饭到西楼还不到八点，和潘总综合考虑打量以后还是选择了517教室，主要是519教室看着有点暗，桌子太大，也不是主教室，里面还有一些考研同学的📕什么的，我还担心后面会不会又有人来，最终还是选517了，后排靠窗位置不错，空间大，视野好，还有一个窗台可以放书，这就很nice。后来也证明我们的确来早了，快九点了其它队伍才陆陆续续的过来。九点开题后大致浏览了一下三道题，A题是疫苗生产问题，B题是消防救援问题，C题是数据驱动的异常检测与预警问题，初步感觉A题像是排队论问题，B题是图论的路径类问题，C题应该是大数据分析问题，我们又仔细研究了一下题目，A题第一问很简单，计算数据属性的，平均值、方差什么的，但后面的题目就看不大懂了，题目的含义都没搞明白，再看B题，前三题都是预测拟合类问题，处理数据什么的，感觉灰色预测、曲线拟合、数据插值什么的应该都能用，后面选址问题求一下最短路径估计就行了，C题应该是要分析出一个指标来判断生产线是否出现了异常，联想起之前老师说过C题看起来简单，但统计指标的选取非常重要，一旦统计指标选错了后面就会全错。最终，我们还是还是选择了看起来我们知道模型最多的B题（其实这时想到的模型基本都用不了，主要还是经验少），选好题大概用了一个小时，联想国赛有人大半天都选不好题，我们就感觉自己的速度很快了，接着就正式开始写B题了。</p><h3 id="心力憔悴的过程"><a href="#心力憔悴的过程" class="headerlink" title="心力憔悴的过程"></a>心力憔悴的过程</h3><p>首先我们查了大半个小时的论文，其实我们也没查到什么，总之乱七八糟的我们就开始写第一题了，第一题是分析春夏秋冬第一天怎么安排值班人数，阳姐说应该是规划类问题（我也觉得有道理），一天不超过30人，三个时间段最少不少于5人，但我又觉得这个问题我们不知道求值的那个方程，应该用预测方法来做，由于对灰色预测理解得不够透彻，这个题一开始我们竟然想用灰色预测来做，但由于数据实在是太少了，最后只能用权值占比来做了，但我老感觉明年这四天各时间段发生事件的概率和前四年的关系不是很大，但也没有其它好的方法了，这个题拖到最后一天晚上还是用权值占比的方法写了，第二题是要求用前四年的数据建立数学模型来预测第六年各月事件的次数，用第五年的已知数据进行检验，这个题数据很多，一开始我觉得这个肯定是用灰色预测了，没想到千辛万苦预测出来竟然是一条直线？？？这时我就有点崩溃了，连续两题都没写出来，还是前两题，我还是不死心的用曲线拟合来拟合48个散点，由于离散程度太高，拟合效果非常差，挣扎一段时间后，我们终于观察到48个散点呈周期性变化且以12为周期，这是一个非常重要的信息，于是我们开始找周期性预测的模型，但我们又错误的选择了蒙特卡洛，这是一个随机预测模型，即对下一次事件的预测只与当前状况有关（这明显不符合），当时决定用蒙特卡洛模型后我开始在CSDN上找源码，但有些源码文件只有会员才能下载，会员费用要50，而且也不能确定下的代码是否正确，下午的时间就在找源码的过程中结束了，最终在吃晚饭的时候我看到MATLAB交流群里的信息，淘宝5毛钱可以下载一次CSDN代码，于是我回去后又来精神了，开始在淘宝、CSDN上来回折腾，结果找到的代码要么是不对、要么是不能运行报错、要么是版本过老2020a不支持，而且在搜索的过程中我们终于也发现了蒙特卡洛模型的弊端，第2题根本不能用蒙特卡洛来做。这个时候我已经有点想换题了，主要下午听到隔壁已经在写B题第四问了，其它3支队伍进度好像都比我们快很多，而我们前两问一个都没做出了，这确实对我是一个不小的打击，但总算还是忍住了，如果这个时候换题，估计我们最后论文都要交不上了（事实证明坚持下去是对的），然后在不断的挣扎中终于找到正主，时间序列模型闪亮登场，但遗憾的是我们依然没有这个模型的源码，《数学建模算法与应用》这本书上其实是有时间序列模型的源码的，只可惜的是我买的是第3版的，4月份刚好买到了发行的新版，于是我们又陷入了困境，然而功夫不负有心人，我又在之前加的另一个群里找到了第2版的源码文件，本以为终于要解决这道问题时发现用时间序列模型直接预测结果明显偏大，这时已经11点，为了第二天有充足的精力与时间完成剩下的题，我们决定先回去睡觉💤，第二天直接开始第三题。第三题是建立各类事件发生次数与月份关系的多种数学模型，以拟合度最优为评价标准，确定每类事件发生次数的最优模型。这道题还是一头雾水，查了一上午资料，最后还是在午饭之前用曲线拟合把这道题过了，下午就是第四、第五题了，这两道题思路还是很清晰的，没有走多少弯路，主要就是在理解题意上花了不少时间，三维图画出来后在图上就可以看出很多信息，这些信息整理一下就可以直接拿来当结论了。综合这几道题的解题过程，我觉得拿到题后一定不能先急着确定模型，一定要先对数据有一个总体上的直观把握，最好的方式就是先画图，观察数据的规律趋势后再选定模型。大概到了晚上我们就把四五题给写完了，第六题思路也很流畅，这道题是选址问题，首先肯定要得到各区域之间的最短路径，因为这关系到救援到达的时间，一开始打算用dfs搜一下，后来发现图论的Floyd 算法时间复杂度更低、名字听起来也高大上一些，于是决定用Floyd算法，我们还确定了已有消防站对各区域的救援程度、人口密度、事件发生次数等主要影响因子，至此今天的工作就全部完成了，感觉有点飘，主要题目差不多都写完了，第六题也有了明确的思路，回到寝室洗了个澡，用Java把dfs简单实现一下大概就12点半了，睡觉💤。第三天上午就是第六题的建模过程了，基本数据都准备好了，我们计划用贡献值代表在某个区域建消防站的贡献程度，最后贡献值最大那个地域就是建消防站的位置。首先要算出每个消防站点贡献值，本以为思路都明确了应该很快就能做出来的，结果在求贡献值的过程中又发现了一些错误，首先是路径影响因子的计算，一开始我们是用每个区域到其它所有区域的和来作为路径影响因子，再用路径影响因子乘其它所有因子后求和作为贡献值，但其实这样是错的，因为其余每个区域的事件密度、人口密度不同，到达每个区域的最短路径也不同，所以应该分别计算到各个区域的最短路径再点乘其它影响因子后再求和，这个结果才是一个区域真正的贡献值。但这个贡献值计算有一个难点，贡献值的含义是该区域对其它所有区域的救援帮助能力之和，很明显，对某个区域的救援帮助能力应该和到这个区域的最短距离呈负相关，即距离越远帮助越小，所以我们计划用最短路径的反比来代表距离影响因子，这是一个反比例函数，问题就出在我们无法计算出它对自己所在区域的贡献值，因为我们假设所有区域都是一个物理上的点，这样到自己区域的距离就是零了，反比例函数在x=0处的值是无限大，肯定不能用无限大代表对自己所在区域的贡献值，也不能随便找一个常数来代替，我们应该用一个函数来确定这个距离影响因子，用常数来代替就相当于我们在一个因子的计算上用了两个标准，这肯定是不行的，当时我一直没想到怎么量化对自身贡献的大小，队友也坚定说不用考虑对自身的贡献，我们在这个问题上激烈讨论了很久也没有得到一个统一的结论，最终我们还是选择不考虑对自身贡献值的影响，最后得到的答案是D点，我也觉得这个答案是对的，但我还是感觉我们得到的方式不对，如果考虑对自身贡献的影响，结果肯定是P点，但考虑到P点人口密度过高、占地面积过小且还是交通枢纽，我们应该舍弃P点转而将消防站建立在贡献值第二高的D点，其实这也不难实现，我们原来是用反比例函数来计算距离影响因子的，但在x轴上单调递减且在x=0处不为无穷大的函数还有很多，比如对数函数，如果当时能想到用对数函数来计算距离影响因子的话结果肯定会好很多。第六题搞完已经到下午了，但这时离结束还早，由于在解题过程中我一直忽视了向写论文的队友✍传达我们的建模思路，我原本以为稍微修改一下语句理一下逻辑就好了，但结果发现论文基本上没有逻辑，而且论文里有很多专业性内容，有专业性内容当然很好，但主要是这些内容没有串联到我们的建模思路中，简单的来说就是我们根本不会用这些知识，这样就导致整篇论文看起来华而不实、完全没有逻辑。我觉得，评委们虽说每篇文章看得时间短，但他们肯定是能看懂推导过程的，如果说我们根本没有推导过程，只是用看起来高大上的公式内容堆砌起来，我觉得我们会死得明明白白的……，不说了，说多了都是泪，主要还是我们的经验不足。然后就是改论文了，先把逻辑不通顺、用不到的知识删掉，再把自己的思路加进去，摘要、优缺点、推广、假设啪啪啪一敲，史上最强论文就这样诞生，没有之一，上传提交，直接起飞✈。<br>（PS：其实图号和表号还没调，不过这些都是我第二天发现的了）</p><h3 id="凌晨两点的收尾"><a href="#凌晨两点的收尾" class="headerlink" title="凌晨两点的收尾"></a>凌晨两点的收尾</h3><p>五月四号凌晨两点半🕖，门卫大爷已经在大厅椅子上睡着了，走出和平大楼🌃，外面已经下起了小雨🌧，刚才改论文的时候就听见窗外一直在刮风，伸个懒腰，现在我们只想回去睡个通天亮💤💤。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="结束，也是新的开始"><a href="#结束，也是新的开始" class="headerlink" title="结束，也是新的开始"></a>结束，也是新的开始</h3><p>五一建模只是我们评选种子队的一场测试，国赛才是我们的目标，距离国赛也仅有4个多月的时间了，4个月后的结果又会是怎么样的呢？每个故事都会结束，只是有人欢喜有人哭。<br>？？？<br>打住，我又开始煽情了，先给国赛留个🕳吧，等国赛结束了再写篇国赛回顾，就这样，over。</p><p>2021年5月4日晚于锦城白宫</p>]]></content>
    
    
    <categories>
      
      <category>MATLAB</category>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
      <tag>经验总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>种群竞争模型</title>
    <link href="/2021/04/28/Lotka_Volterra/"/>
    <url>/2021/04/28/Lotka_Volterra/</url>
    
    <content type="html"><![CDATA[<p>在自然界中，种群数量往往会随着其天敌或食物数量的变化而变化，本文采用Lotka_Volterra模型模拟了兔子与狐狸之间种群数量的变化规律，并考虑兔子的环境容纳量对模型做了进一步优化</p><span id="more"></span><h2 id="问题背景与重述"><a href="#问题背景与重述" class="headerlink" title="问题背景与重述"></a>问题背景与重述</h2><h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p><img src="/img/MATLAB/Lotka_Volterra/1.png"><br>使用一阶非线性微分方程组模拟数量关系，方程组无解析解</p><h3 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h3><p>为研究变化规律，提出以下问题<br><img src="/img/MATLAB/Lotka_Volterra/2.png"></p><h2 id="问题求解"><a href="#问题求解" class="headerlink" title="问题求解"></a>问题求解</h2><h3 id="问题1-3"><a href="#问题1-3" class="headerlink" title="问题1~3"></a>问题1~3</h3><p>按题目调好参数后运行程序，源码及结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">%% 种群竞争模型<br>clear,clc;<br>rabbitFox=@(t,x)[x(1)*(2-0.01*x(2));x(2)*(-1+0.01*x(1))];<br>% 积分范围 0~30，初始值分别为300，150，x为所有解，t为每一个积分点<br>[t,x]=ode45(rabbitFox,[0,30],[300,150]);<br>subplot(1,2,1);plot(t,x(:,1),<span class="hljs-string">&#x27;-&#x27;</span>,t,x(:,2),<span class="hljs-string">&#x27;-*&#x27;</span>);<br>legend(<span class="hljs-string">&#x27;x1(t)-兔子&#x27;</span>,<span class="hljs-string">&#x27;x2(t)-狐狸&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>);ylabel(<span class="hljs-string">&#x27;物种数量&#x27;</span>);<br>grid on;<br>% 画相位图<br>subplot(1,2,2);plot(x(:,1),x(:,2));<br>xlabel(<span class="hljs-string">&#x27;兔子数量&#x27;</span>);ylabel(<span class="hljs-string">&#x27;狐狸数量&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><p><img src="/img/MATLAB/Lotka_Volterra/3.png"></p><p>可以看到，兔子与狐狸的数量成周期性变化，呈负相关，周期由初始条件决定。2、3问改动参数即可得到答案，结果与1类似</p><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><p>按上题源码，我们取初始值为100，200，第4问运行结果如下<br><img src="/img/MATLAB/Lotka_Volterra/4.png"><br>可以看到，种群数量处于稳定状态，我们改动初值为98，198，结果如下<br><img src="/img/MATLAB/Lotka_Volterra/5.png"><br>发现稍微偏离平衡点后，种群数量开始在小范围内波动，正如题目所述</p><h2 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h2><h3 id="基于兔子环境容纳量改进模型"><a href="#基于兔子环境容纳量改进模型" class="headerlink" title="基于兔子环境容纳量改进模型"></a>基于兔子环境容纳量改进模型</h3><p>修改后的方程组及符号含义如下<br><img src="/img/MATLAB/Lotka_Volterra/6.png"><br>当数量r大于R时，取值为负，种群数量永远不会超过R值，不妨取环境容纳量R为400，对函数rabbitFox及参数调整如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">%% 种群竞争模型<br>clear,clc;<br>rabbitFox=@(t,x)[2*x(1)*(1-x(1)/400-0.005*x(2));x(2)*(-1+0.01*x(1))];<br>% 积分范围 0~30，初始值分别为300，150，x为所有解，t为每一个积分点<br>[t,x]=ode45(rabbitFox,[0,50],[300,150]);<br>subplot(1,2,1);plot(t,x(:,1),<span class="hljs-string">&#x27;-&#x27;</span>,t,x(:,2),<span class="hljs-string">&#x27;-*&#x27;</span>);<br>legend(<span class="hljs-string">&#x27;x1(t)-兔子&#x27;</span>,<span class="hljs-string">&#x27;x2(t)-狐狸&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>);ylabel(<span class="hljs-string">&#x27;物种数量&#x27;</span>);<br>grid on;<br>% 画相位图<br>subplot(1,2,2);plot(x(:,1),x(:,2));<br>xlabel(<span class="hljs-string">&#x27;兔子数量&#x27;</span>);ylabel(<span class="hljs-string">&#x27;狐狸数量&#x27;</span>);<br>grid on;<br></code></pre></td></tr></table></figure><p>运行结果如下<br><img src="/img/MATLAB/Lotka_Volterra/7.png"><br>可以发现，种群数量在波动中不断稳定，最终稳定在某个数值附近，这也与正常自然环境下的情况相吻合</p><h3 id="模型的进一步改进"><a href="#模型的进一步改进" class="headerlink" title="模型的进一步改进"></a>模型的进一步改进</h3><ul><li>考虑狐狸的环境容纳量</li><li>考虑兔子其它天敌和狐狸天敌的影响</li><li>考虑自然灾害、人为捕捉等因素</li></ul>]]></content>
    
    
    <categories>
      
      <category>MATLAB</category>
      
      <category>算法模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
      <tag>模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/24/hello-world/"/>
    <url>/2021/04/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo???????"></a>Hello Hexo???????</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
